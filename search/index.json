[{"content":"前言 决定写这么一个分类，主要是记录一下我平时在做些东西时遇到的各种奇奇怪怪的问题，以及我是怎么用莫名方法解决的。然后以后我再遇到同样问题的时候也可能有办法解决。\n问题 解决方法 可能不适用所有人\n找到mysql目录,位置在C:\\Program Files\\MySQL，然后右键MySQL选择属性，修改用户权限\n具体修改哪个不清楚，反正你开个虚拟机然后赋予所有用户所有权限就行。\n","date":"2024-01-22T17:45:52+08:00","image":"https://gcore.jsdelivr.net/gh/wingllllet/pic_bed@img//img/640.png","permalink":"https://blog.winglet.com/p/%E9%83%A8%E7%BD%B2aspcms%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","title":"部署aspcms之数据库错误解决方法"},{"content":"前言 ​\t搬运一下我自己写的笔记给我的博客，让我的博客充实些，不能建完就甩到一边了。不得不说个人博客让我有一种什么都想往上写的感觉，之前也在csdn写过东西，后面不写主要是感觉麻烦，自己的笔记上传过去图片经常加载不出来，所以在csdn写的话图片少还好说，图片多了真就望而却步了。\n介绍 ​\tbandit是over the wire推出的一个为提升linux基础的系统靶场，目前共有33关，适合小白学习和增强linux命令操作。靶场网址：https://overthewire.org/wargames/bandit/\nwp level 0 题目描述 此级别的目标是让您使用 SSH 登录游戏。您需要连接的主机是 bandit.labs.overthewire.org，端口为 2220。用户名是bandit0，密码是bandit0。登录后，转到第 1 级页面，了解如何通过第 1 级。\n解决方法 ssh bandit0@bandit.labs.overthewire.org -p 2220 level 0 题目描述 下一级的密码存储在 主目录中名为readme的文件中。使用此密码通过 SSH 登录 bandit1。每当您找到某个关卡的密码时，请使用 SSH（在端口 2220 上）登录该关卡并继续游戏。\n解决方法 ls cat readme readme: NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL level 1 题目描述 下一级的密码存储在 主目录中名为-的文件\n解决方法 ls cat ./- 因为-在shell中是一个特殊字符，如果我们想要它只把它看作为一个字符，我们需要在前面加上./这就是告诉bash shell不需要解释为特殊字符\nreadme: rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi level 2 题目描述 下一级的密码存储在主目录中名为space的文件中\n解决方法 ls -al cat \u0026#34;spaces in this filename\u0026#34; cat spaces/ in/ this/ filename 在bash shell中空格会将命令隔开，也就将文件名不会视为一个整体\n，这里我们有两种方法解决，第一种就是用双引号包裹，让它认为这是一个整体，第二种就是用\\ 让它把空格符也作为普通字符并拼接起来。\nreadme： aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG level 3 题目描述 下一级的密码存储在 inhere目录中的隐藏文件中。\n解决方法 ls cd inhere ls -al cat .hidden 当文件名的前面加上.后，它就会变为隐藏文件，这时我们只用ls命令是看不见该文件的存在的，所以我们需要加参数-al这样就可以显示当前目录下的所有文件。\nreadme: 2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe level 4 题目描述 下一级的密码存储在inhere目录中唯一人类可读的文件中。提示：如果您的终端出现问题，请尝试“重置”命令。\n解决方法 cd inhere file ./* cat ./-file07 在inhere目录下，有很多文件，这些文件里面只有file07里面才有真正的内容，我们可以一个一个打开文件，查看里面的内容，或者使用file ./* ， 对当前目录下的所有文件进行文件类型的检测。\n这样我们就能知道哪个文件里面\nreadme: lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR level 5 题目描述 下一级的密码存储在inhere目录下的某个文件中，并具有以下所有属性：\n人类可读的 大小为 1033 字节 不可执行 解决方法 cd inhere find . -type f -size 1033c cd maybehere07 ls cat .file2 find . -type f -size 文件大小单元 f: 类型为文件 b -- 块 (512字节) c -- 字节 w -- 字 (2字节) k -- 千字节 M -- 兆字节 G -- 吉字节 \u0026ldquo;find\u0026rdquo; 是一个命令行工具，用于在文件系统中搜索文件和目录。 \u0026ldquo;.\u0026rdquo; 表示当前目录，作为搜索的起始点。 \u0026ldquo;-type f\u0026rdquo; 是一个条件选项，用于指定只搜索普通文件（排除目录和其他特殊文件）。 \u0026ldquo;-size 1033c\u0026rdquo; 是一个条件选项，用于指定搜索文件大小为 1033 字节。 readme: P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU level 6 题目描述 下一级的密码存储在服务器上的某个位置，并具有以下所有属性：\n由用户 bandit7 拥有 归强盗6集团所有 大小为 33 字节 解决方法 find / -user bandit7 -group bandit6 -size 33c /: 从根目录找起 -user: 文件由用户uname所有（允许使用数字用户 ID） -group: 文件属于组gname（允许使用数字组 ID） 找到一堆无权限文件，但那些都不重要\nreadme: z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S level 7 题目描述 下一级的密码存储在文件data.txt中 millionth 单词旁边\n解决方法 grep millionth data.txt 执行命令 \u0026ldquo;grep millionth data.txt\u0026rdquo; 会在 \u0026ldquo;data.txt\u0026rdquo; 文件中搜索包含 \u0026ldquo;millionth\u0026rdquo; 的文本行，并将匹配到的行输出到终端。\nreadme: TESKZC0XvTetK0S9xNwm25STk5iWrBvP level 8 题目描述 下一级的密码存储在文件data.txt中 ，并且是唯一只出现一次的文本行\n解决方法 sort data.txt | uniq -u sort -- 是一个命令行工具，用于对文本文件进行排序。 | -- 是管道符号，用于将前一个命令的输出作为后一个命令的输入。 uniq -- 是一个命令行工具，用于查找和删除连续重复的行。 -u -- 是 \u0026#34;uniq\u0026#34; 命令的选项，用于仅输出不重复的行 readme: EN632PlfYiZbn3PhVK3XOGSlNInNE00t level 9 题目描述 下一级的密码存储在文件data.txt中 ，位于少数几个人类可读的字符串之一中，前面有几个“=”字符。\n解决方法 这里的data.txt是一个二进制文件，用grep是没法查找了，所以我们要把这个文件里的数据转为可打印字符。\nstrings data.txt | grep = strings -- 是一个命令行工具，用于从二进制文件中提取可打印的字符串。 这里我们还有别的办法，我们也可以用xxd命令，它可以把该文件内容作为16进制输出，这样我们也可以用grep命令查找\nreadme: G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s level 10 题目描述 下一级的密码存储在文件data.txt中，其中包含base64编码的数据\n解决方法 cat data.txt | base64 -d base -d data.txt -d -- base64的命令选项，可以把base64编码解密并输出 readme: 6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM level 11 题目描述 下一级的密码存储在文件data.txt中，其中所有小写 (az) 和大写 (AZ) 字母均已旋转 13 个位置\n解决方法 cat data.txt | tr \u0026#34;a-zA-Z\u0026#34; \u0026#34;n-za-mN-ZA-M\u0026#34; tr -- 字符替换操作 a-zA-Z -- 表示要替换的字符范围 n-za-mN-ZA-M -- 将字符按照偏移量为13的逆序进行替换 这关也可以把文件内容复制出来，然后找个凯撒解密工具解决。\nreadme: JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv level 12 题目描述 下一级的密码存储在文件data.txt中，该文件是经过反复压缩的文件的十六进制转储。对于此级别，在 /tmp 下创建一个目录可能会很有用，您可以在其中使用 mkdir 进行工作。例如：mkdir /tmp/myname123。然后使用 cp 复制数据文件，并使用 mv 重命名它（阅读手册页！）\n解决方法 mkdir -p /tmp/winglet cp data.txt /tmp/winglet cd /tmp/winglet xxd -r data.txt \u0026gt; data.bin file data.bin mv data.bin data.gz gzip -d data.gz file data mv data data.bz gzip -d data.bz file data mv data data.gz gzip -d data.gz file data mv data data.tar tar vxf data.tar file data5.bin mv data5.bin data.tar tar vxf data.tar file data6.bin mv data6.bin data.bz bzip2 -d data.bz file data mv data data.tar tar vxf data.tar file data8.bin mv data8.bin data.gz gzip -d data.gz file data.gz file data cat data xxd -- 用于在十六进制和其他进制之间进行转换，并以不同的格式显示文件的内容 -r -- xxd的选项 将十六进制转换为二进制格式。 bzip2 -- 一个常用的压缩和解压缩工具 -d -- bzip2的一个选项 解压缩文件，恢复为原始文件 gzip -- 一个常用的压缩和解压缩工具 -d -- gzip的一个选项 解压缩文件，恢复为原始文件 tar -- 一个常用的归档工具 -x -- 提取归档文件 -v -- 显示详细的操作信息。 -f -- 指定归档文件的名称。 readme: wbWdlBxEir4CaE8LaPhauuOo6pwRmrDw level 13 题目描述 下一级的密码存储在 /etc/bandit_pass/bandit14 中，并且只能由用户 bandit14 读取。对于此级别，您不会获得下一个密码，但您会获得可用于登录下一个级别的 SSH 私钥。 注意： localhost是指您正在使用的计算机的主机名\n解决方法 ls cat sshkey.private sshkey.private: -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEAxkkOE83W2cOT7IWhFc9aPaaQmQDdgzuXCv+ppZHa++buSkN+ gg0tcr7Fw8NLGa5+Uzec2rEg0WmeevB13AIoYp0MZyETq46t+jk9puNwZwIt9XgB ZufGtZEwWbFWw/vVLNwOXBe4UWStGRWzgPpEeSv5Tb1VjLZIBdGphTIK22Amz6Zb ThMsiMnyJafEwJ/T8PQO3myS91vUHEuoOMAzoUID4kN0MEZ3+XahyK0HJVq68KsV ObefXG1vvA3GAJ29kxJaqvRfgYnqZryWN7w3CHjNU4c/2Jkp+n8L0SnxaNA+WYA7 jiPyTF0is8uzMlYQ4l1Lzh/8/MpvhCQF8r22dwIDAQABAoIBAQC6dWBjhyEOzjeA J3j/RWmap9M5zfJ/wb2bfidNpwbB8rsJ4sZIDZQ7XuIh4LfygoAQSS+bBw3RXvzE pvJt3SmU8hIDuLsCjL1VnBY5pY7Bju8g8aR/3FyjyNAqx/TLfzlLYfOu7i9Jet67 xAh0tONG/u8FB5I3LAI2Vp6OviwvdWeC4nOxCthldpuPKNLA8rmMMVRTKQ+7T2VS nXmwYckKUcUgzoVSpiNZaS0zUDypdpy2+tRH3MQa5kqN1YKjvF8RC47woOYCktsD o3FFpGNFec9Taa3Msy+DfQQhHKZFKIL3bJDONtmrVvtYK40/yeU4aZ/HA2DQzwhe ol1AfiEhAoGBAOnVjosBkm7sblK+n4IEwPxs8sOmhPnTDUy5WGrpSCrXOmsVIBUf laL3ZGLx3xCIwtCnEucB9DvN2HZkupc/h6hTKUYLqXuyLD8njTrbRhLgbC9QrKrS M1F2fSTxVqPtZDlDMwjNR04xHA/fKh8bXXyTMqOHNJTHHNhbh3McdURjAoGBANkU 1hqfnw7+aXncJ9bjysr1ZWbqOE5Nd8AFgfwaKuGTTVX2NsUQnCMWdOp+wFak40JH PKWkJNdBG+ex0H9JNQsTK3X5PBMAS8AfX0GrKeuwKWA6erytVTqjOfLYcdp5+z9s 8DtVCxDuVsM+i4X8UqIGOlvGbtKEVokHPFXP1q/dAoGAcHg5YX7WEehCgCYTzpO+ xysX8ScM2qS6xuZ3MqUWAxUWkh7NGZvhe0sGy9iOdANzwKw7mUUFViaCMR/t54W1 GC83sOs3D7n5Mj8x3NdO8xFit7dT9a245TvaoYQ7KgmqpSg/ScKCw4c3eiLava+J 3btnJeSIU+8ZXq9XjPRpKwUCgYA7z6LiOQKxNeXH3qHXcnHok855maUj5fJNpPbY iDkyZ8ySF8GlcFsky8Yw6fWCqfG3zDrohJ5l9JmEsBh7SadkwsZhvecQcS9t4vby 9/8X4jS0P8ibfcKS4nBP+dT81kkkg5Z5MohXBORA7VWx+ACohcDEkprsQ+w32xeD qT1EvQKBgQDKm8ws2ByvSUVs9GjTilCajFqLJ0eVYzRPaY6f++Gv/UVfAPV4c+S0 kAWpXbv5tbkkzbS0eaLPTKgLzavXtQoTtKwrjpolHKIHUz6Wu+n4abfAIRFubOdN /+aLoRQ0yBDRbdXMsZN/jvY44eM+xRLdRVyMmdPtP8belRi2E2aEzA== -----END RSA PRIVATE KEY----- 将这个私钥复制后，在桌面新建一个空白文件，并把该内容输入进去，之后利用他连接bandit14\nchmod 600 id_rsa ssh -i id_rsa bandit14@bandit.labs.overthewire.org -p 2220 cat /etc/bandit_pass/bamdit14 readme: fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq level 14 题目描述 将当前级别的密码提交到localhost 的 30000 端口即可获取下一级的密码。\n解决方法 nc localhost 30000 echo fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq | nc localhost 30000 telnet localhost 30000 nc -- 是一个网络工具，用于在网络上进行数据传输。它可以用于创建 TCP 或 UDP 连接、发送和接收数据，以及进行端口扫描等操作。 nc \u0026lt;目标主机\u0026gt; \u0026lt;目标端口\u0026gt; \u0026lt; 文件 -- 发送文件 telnet -- 一种用于远程登录和网络通信的协议和工具 readme: jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt level 15 题目描述 通过使用 SSL 加密将当前级别的密码提交到localhost 的 30001 端口，可以检索下一级的密码。\n有用的注释：获得“HEARTBEATING”和“Read R BLOCK”？使用 -ign_eof 并阅读联机帮助页中的“连接命令”部分。除了“R”和“Q”之外，“B”命令也适用于该命令的此版本\u0026hellip;\u0026hellip;\n解决方法 openssl s_client -connect localhost:30001 openssl -- 一个开源的加密工具包，提供了一组用于处理加密、解密、签名、验证等操作的命令行工具 ssl协议 -- 一种用于在计算机网络上进行安全通信的协议。SSL的目标是通过使用加密和身份验证机制，确保在客户端和服务器之间传输的数据的保密性、完整性和可信性。 s_client -- 用于在命令行中模拟 SSL/TLS 客户端的行为 -connect -- 指定要连接的主机和端口 example： openssl s_client -connect example.com:443 readme: JQttfApK4SeyHwDlI9SXGR50qclOAil1 level 16 题目描述 可以通过将当前级别的密码提交到本地主机上 31000 到 32000 范围内的端口来检索下一个级别的凭据。首先找出服务器正在监听哪些端口。然后找出哪些使用 SSL，哪些不使用 SSL。只有一台服务器会提供下一个凭据，其他服务器只会将您发送给它的任何内容发送回给您。\n解决方法 nmap -sV -T4 lcoalhost -p 31000-32000 -sV -- 使用版本探测功能，尝试确定目标主机上运行的服务和其版本信息。 -T4 -- 设置扫描速度为“快速”模式，以更高的速度执行扫描。 openssl s_client -connect localhost:31790 chmod 600 id_rsa ssh -i id_rsa bandit17@bandit.labs.overthewire.org -p 2220 cat /etc/bandit_pass/bandit14 readme: VwOSWtCA7lRKkTfbr2IDh6awj9RNZM5e level 17 题目描述 主目录中有2个文件：passwords.old和passwords.new。下一级的密码位于 passwords.new中，并且是 passwords.old和password.new之间唯一已更改的行\n注意：如果您已解决此级别并看到“再见！” 当尝试登录 bandit18 时，这与下一个级别 bandit19 有关\n解决方法 diff passwords.new password.old diff -- 用于比较文件和目录之间的差异 readme: hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg level 18 题目描述 下一级的密码存储在主目录中的自述文件中。不幸的是，有人修改了.bashrc ，以便在您使用 SSH 登录时将您注销。\n解决方法 cat /etc/shells /etc/shells -- 是一个位于 Unix/Linux 系统中的文件路径，它包含了系统中可用的登录 shell 列表。这个文件用于指定哪些用户 shell 可以用于登录系统。 ssh bandit18@bandit.labs.overthewire.org -p 2220 -t /bin/sh cat readme /bin/sh -- Sh 是一种最早出现的 Unix Shell，它由 Stephen Bourne 开发。Sh 是许多 Unix 系统默认的标准 Shell。它提供了基本的命令行解释功能，允许用户执行命令、运行脚本和控制系统。Sh 在功能和语法方面相对简单，缺乏一些现代 Shell 的高级特性。 /bin/bash -- Bash 是 Sh 的增强版本，由 Brian Fox 开发。Bash 在功能和语法上扩展了 Sh，提供了更多的特性和工具。Bash 兼容 Sh，因此可以执行 Sh 脚本，并且可以使用更多的命令和语法扩展。Bash 是许多 Linux 系统默认的 Shell，并且也广泛用于其他 Unix 系统。 readme: awhqfNnAbc1naukrpqDYcF95h7HoMTrC level 19 题目描述 要访问下一个级别，您应该使用主目录中的 setuid 二进制文件。不带参数执行它以了解如何使用它。使用 setuid 二进制文件后，可以在通常的位置 (/etc/bandit_pass) 找到此级别的密码。\n解决方法 ./bandit20-do cat /etc/bandit_pass/bandit20 SUID (Set User ID) 和 SGID (Set Group ID) 是 Unix/Linux 系统中的两个特殊权限位，用于设置可执行文件的权限。 在这里该文件的拥有者是bandit20然后bandit19拥有使用权，当该文件具有suid权限的时候，这就意味着普通用户在执行该文件的时候，会以文件所有者的身份执行，为不是以执行者自己的身份。\n设置suid权限的母的是允许欧通用户以特权用户的身份去执行某些特定的命令或程序，而在这种情况下，bandit19可以用bandit20的身份执行命令。\n而这个二进制文件的功能是自定义的。\nreadme: VxCazJaVykI6W36BkBU0mJTCM8rR95XT level 20 题目描述 主目录中有一个 setuid 二进制文件，它执行以下操作：它在您指定为命令行参数的端口上建立到本地主机的连接。然后，它从连接中读取一行文本，并将其与上一级别 (bandit20) 中的密码进行比较。如果密码正确，则会传送下一级（bandit21）的密码。\n注意：尝试连接到您自己的网络守护程序，看看它是否按您的想法工作\n解决方法 nc -lv -p 0 \u0026lt; /etc/bandit_pass/bandit20 \u0026amp; nc -- 它是一个网络工具，用于在不同主机之间进行数据传输和网络连接 -lv -- 参数用于指定 nc 命令以监听模式运行，并打印接收到的数据。 -p -- 参数用于指定监听端口。在这个示例中，端口号被设置为 0，代表随机选择一个可用的端口进行监听。 \u0026lt; -- 将/etc/bandit_pass/bandit20文件的内容作为输入提供给前面的命令 \u0026amp; -- 符号用于将命令放入后台执行，以便继续在终端中执行其他命令。 ./suconnect 23333 readme: NvEJF7oVjkddltPSrdKEFOllh9V1IBcq level 21 题目描述 程序从 基于时间的作业调度程序cron定期自动运行。查看 /etc/cron.d/中的配置并查看正在执行什么命令。\n解决方法 cron 是一个在 Unix/Linux 系统上用于执行预定任务的定时任务调度器。它允许用户创建和管理定期执行的任务，这些任务可以是脚本、命令或任何可执行程序。Cron 基于 crontab（cron table）文件来定义和配置这些任务。\ncd /etc/cron.d ls cat cronjob_bandit22 这样我们就知道，程序在定时执行/usr/bin/cronjob_bandit22.sh文件的内容。\ncat /usr/bin/cronjob_bandit22.sh 以此可知，他把密码放在了/tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\ncat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv readme: WdDozAdTM2z9DiFEQ2mGlwngMfj4EZff level 22 题目描述 程序从 基于时间的作业调度程序cron定期自动运行。查看/etc/cron.d/中的配置并查看正在执行什么命令。\n注意：查看其他人编写的 shell 脚本是一项非常有用的技能。此级别的脚本有意使之易于阅读。如果您在理解它的作用时遇到问题，请尝试执行它以查看它打印的调试信息。\n解决方法 cat /etc/cron.d/cronjob_bandit23 cat /usr/bin/cronjob_bandit23.sh echo I am user bandit23 | md5sum | cut -d \u0026#39; \u0026#39; -f 1 cat /tmp/8169b67bd894ddbb4412f91573b38db3 readme: QYw0Y2aiA672PsMmh9puTQuhoz8SyR2G level 23 题目描述 程序从 基于时间的作业调度程序cron定期自动运行。查看/etc/cron.d/中的配置并查看正在执行什么命令。\n注意：此级别要求您创建自己的第一个 shell 脚本。这是非常大的一步，当你通过这个关卡时，你应该为自己感到自豪！\n注意 2：请记住，您的 shell 脚本一旦执行就会被删除，因此您可能需要保留一份副本\u0026hellip;\u0026hellip;\n解决方法 根据描述先查看/etc/cron.d文件\ncd /etc/cron.d ls 查看与bandit24有关的\ncat cronjob_bandit24 cron是一个用于在Linux和类Unix系统上执行预定任务的工具。/etc/crontab文件是系统范围的cron配置文件，其中包含了各个用户的定时任务。 cron作业的条目，它会在每次系统启动时以bandit24用户身份执行/usr/bin/cronjob_bandit24.sh脚本，并将输出重定向到/dev/null。 查看bandit24.sh内容\ncat /usr/bin/cronjob_bandit24.sh cronjob_bandit24.sh #!/bin/bash # 获取当前用户名，因为该文件运行权限是bandit24，所以该变量存储 bandit24 myname=$(whoami) # 进入目录 cd /var/spool/$myname/foo # 打印信息 echo \u0026#34;Executing and deleting all scripts in /var/spool/$myname/foo:\u0026#34; # 遍历目录中的所有文件和目录（包括隐藏文件和目录） for i in * .*; do # 检查文件或目录是否不是当前目录（\u0026#34;.\u0026#34;）或父目录（\u0026#34;..\u0026#34;） if [ \u0026#34;$i\u0026#34; != \u0026#34;.\u0026#34; -a \u0026#34;$i\u0026#34; != \u0026#34;..\u0026#34; ]; then # 打印信息 echo \u0026#34;Handling $i\u0026#34; # 使用 stat 命令获取文件的所有者，并将其存储在 owner 变量中 owner=\u0026#34;$(stat --format \u0026#34;%U\u0026#34; ./$i)\u0026#34; # 判断用户是否bandit23 if [ \u0026#34;${owner}\u0026#34; = \u0026#34;bandit23\u0026#34; ]; then # 如果是bandit23则使用 timeout 在60秒内执行该文件 timeout -s 9 60 ./$i fi # 删除文件 rm -f ./$i fi done 根据上面的代码信息我们可以知道，如果我们用bandit23用户创建一个脚本文件并存入 /bandit24/foo/ 目录内的话，是可以在60秒内执行的，所以我们可以创建一个脚本，让它可以获取bandit24的密码。那么我们的思路就是在tmp目录下创建一个目录，并在里面创建脚本，因为tmp目录下我们是有写文件权限的，然后脚本内容就是把bandit24的密码存入一个文件里。 创建脚本\nmkdir /tmp/rand cd /tmp/rand vim script.sh cp script.sh /var/spool/bandit24 script.sh #!/bin/bash cat /etc/bandit_pass/bandit24 \u0026gt; /tmp/rand/password 这时我们还需要，给tmp/rand一个任何用户都能写文件的权限，不然，bandit24在运行脚本时，会因为没有权限导致不能写文件。\nchmod 777 -R /tmp/rand 接下来就是等一会儿\nls cat password readme: VAfGXJ1PBSsPSnvsjI8p759leLZ9GGar level 24 题目描述 守护程序正在侦听端口 30002，如果给定 bandit24 的密码和秘密数字 4 位 pincode，它将为您提供 bandit25 的密码。除非通过所有 10000 个组合（称为暴力破解），否则无法检索 pin 码。 您不需要每次都创建新连接\n解决方法 根据描述可以知道我们这次要进行爆破了，脚本内容如下：\n#!/bin/bash for i in {5000..9999}; do echo \u0026#34;VAfGXJ1PBSsPSnvsjI8p759leLZ9GGar $i\u0026#34; done | nc localhost 30002 创建文件\nmkdir /tmp/randit24 vim rand.sh ./rand.sh readme: p7TaowMYrmu23Ol8hiZh9UvD0O9hpx8d level 25 题目描述 从 bandit25 登录 bandit26 应该相当容易……用户 bandit26 的 shell 不是/bin/bash，而是其他东西。了解它是什么、它是如何工作的以及如何摆脱它。\n解决方法 ls cat bandit26 使用这个key尝试登录bandit26\nchmod 600 id_rsa ssh -i id_rsa bandit26@bandit.labs.overthewire.org -p 2220 连接失败，我们知道bandit26用户使用的shell不是默认/bin/bash\n所以可以查看一下默认shell信息\ncat /etc/passwd /etc/passwd -- 一个在类Unix操作系统中存储用户账户信息的文件。它是一个文本文件，每一行代表一个用户账户，并使用冒号（:）分隔不同的字段。它包含了系统中所有用户名、组ID、用户主目录、默认shell等信息。 bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext 1. bandit26 -- 用户名，表示用户的登录名 2. x -- 密码字段，以前曾在此处存储用户密码，但现在已经被单独存储在/etc/shadow文件中，并以占位符 x 表示 3. 11026 -- 用户ID(UID)，是系统为每个用户分配的唯一数字标识符 4. 11026 -- 组ID(GID)，是用户所属的组的唯一数字标识符 5. bandit level 26 -- 用户的注释字段，用于描述用户的一些额外信息，例如用户的姓名或角色 6. /home/bandit26 -- 用户主目录，表示用户登录后所在的初始目录 7. /usr/bin/showtext -- 默认shell, 指定用户登录后使用的命令行解释器 查看默认shell\ncat /usr/bin/showtext exec more ~/text.txt -- 这行代码使用\u0026#39;exec\u0026#39;命令来代替当前进程并执行 more ~/text.txt 命令。more 命令用于逐页显示文件内容，这里将显示用户的主目录下的 text.txt 文件 核心：注销的原因是exit 0 行，该行在显示 text.txt 文件中的所有文本后立即执行。 如果需要在终端上显示的内容量大于终端的大小，more 工具就会进入交互模式，知道我们退出为止。所以只要我们不查看文件的所有内容，就不会直接退出程序。 所以我们可以先缩小终端尺寸，然后再以bandit26身份登录，这样就不会注销，并且能处于更多的交互模式\nssh -i bandit26.sshkey bandit26@localhost -p 2220 然后我们可以按\u0026rsquo;v\u0026rsquo;进入vim编辑器，在vim中有一个命令模式，可以执行系统命令\n:set shell=/bin/bash #显式地将外部shell设置为bash，以确保在执行外部命令时使用bash解释器 接下来我们再执行下一个命令\n:shell # 在当前vim会话中启动一个新的子shell终端 # 在vim中执行 :shell 命令时，vim会暂时编辑会话并打开一个新的shell终端，可以在这个shell终端中执行任何命令 # 这个功能可以在不离开Vim的情况下执行一些临时的命令或查看其他文件，然后回到编辑会话继续工作 cat /etc/bandit_pass/bandit26 readme: c7GvcKlw9mC7aUQaPx7nwFstuAIBw1o1 level 26 题目描述 干得好，得到一个外壳！现在赶快获取 bandit27 的密码吧！\n解决方法 在bandit26中有一个bandit27-do的二进制文件，查看属性\n可以发现设置了suid权限，所以我们在使用这个文件时她便具有文件所有者相应的权限。\n./bandit27-do cat /etc/badnit_pass/bandit27 readme: YnQpBuifNMas1hcUFk70ZmqkhUU2EuaS level 27 题目描述 ssh://bandit27-git@localhost/home/bandit27-git/repo通过 port有一个 git 存储库2220。用户的密码bandit27-git与用户的密码相同bandit27。\n克隆存储库并找到下一级的密码。\n解决方法 在/home目录下有一个bandit27-git文件，但是我们没有访问权限，所以我们可以在tmp目录下新建一个文件夹，然后克隆仓库\nmkdir -p /tmp/bandit27-git cd /tmp/bandit27-git git clone ssh://bandit27-git@localhost:2220/home/bandit27-git/repo cd repo cat README git clone -- 是一个Git命令，用于将远程Git仓库复制（克隆）到本地计算机上。它创建一个与远程仓库相同的副本，使你能够在本地进行代码的修改、提交和其他操作，而不会影响到远程仓库。 readme: AVanL161y9rsbcJIsFHuw35rjaOM19nR level 28 题目描述 ssh://bandit28-git@localhost/home/bandit28-git/repo通过 port有一个 git 存储库2220。用户的密码bandit28-git与用户的密码相同bandit28。\n克隆存储库并找到下一级的密码。\n解决方法 前面的方法一样\nmkdir -p /tmp/bandit28 git clone ssh://bandit-git@localhost:2220/home/bandit28-git/repo cd repo 但是这里的README.md文件里的没有下一级的密码。我们可以查看文件更新日志\ngit log git log -- 命令将显示按时间顺序列出的提交记录，包括每个提交的作者、提交日期、提交信息和唯一的提交哈希值 提交 14f754b3ba6531a2b89df6ccae6446e8969a41f3 (HEAD -\u0026gt; master, origin/master, origin/HEAD) 作者：Morla Porla morla@overthewire.org 日期：2023年10月5日 06:19:41 +0000 修复信息泄漏 提交 f08b9cc63fa1a4602fb065257633c2dae6e5651b 作者：Morla Porla morla@overthewire.org 日期：2023年10月5日 06:19:41 +0000 添加缺失的数据 提交 a645bcc508c63f081234911d2f631f87cf469258 作者：Ben Dover noone@overthewire.org 日期：2023年10月5日 06:19:41 +0000 README.md 的初始提交 这里我们要用的是第二个。\ngit checkout f08b9cc63fa1a4602fb065257633c2dae6e5651b cat README.md git checkout -- 用于切换到不同的分支、恢复文件的特定版本或创建新的分支。 readme: tQKvmcwNYcFS6vmPHIUSI3ShmsrQZK8S level 29 题目描述 ssh://bandit29-git@localhost/home/bandit29-git/repo通过 port有一个 git 存储库2220。用户的密码bandit29-git与用户的密码相同bandit29。\n克隆存储库并找到下一级的密码。\n解决方法 前面方法一致\nmkdir -p /tmp/bandit29 cd /tmp/bandit29 git clone ssh://bandit29-git@localhost:2220/home/bandit29-git/repo cd repo cat README.md 在这里production可能是一个分支，所以我们可以查看所有分支\ngit branch -a git branch -- 命令将列出仓库中所有的本地分支。当前活动的分支会以星号标记。 然后我们查看dev分支，切换到dev分支\ngit checkout remotes/origin/dev readme： xbhV3HpNGlTIdnjUrdAlPzc2L6y9EOnS level 30 题目描述 ssh://bandit30-git@localhost/home/bandit30-git/repo通过 port有一个 git 存储库2220。用户的密码bandit30-git与用户的密码相同bandit30。\n克隆存储库并找到下一级的密码。\n解决方法 mkdir -p /tmp/bandit30 cd /tmp/bandit30 git clone ssh://bandit30-git@localhost:2220/home/bandit30-git/repo cd repo cat README.md 文件中无有用内容，并且查看了日志和分支也没有有用部分，这时我们还可以查看标签\ngit tag git tag -- 用于管理和查看标签（tag） 查看里面内容\ngit show secret git show -- 这将显示特定标签的详细信息，包括提交哈希、作者、日期和注释等。 readme: OoffzGDlzhAlerFJ2cAiz1D41JW1Mhmt level 31 题目描述 ssh://bandit31-git@localhost/home/bandit31-git/repo通过 port有一个 git 存储库2220。用户的密码bandit31-git与用户的密码相同bandit31。\n克隆存储库并找到下一级的密码。\n解决方法 mkdir -p /tmp/bandit31 cd /tmp/bandit31 git clone ssh://bandit31-git@localhost:2220/home/bandit31-git/repo cd repo cat README.md 要求发送文件到远程仓库\nls .gitignore 文件里面记录的是不能被储存的文件\ncat .gitignore 也就是说只要是后缀为txt的文件，都不会被推送到远程仓库，所以我们要先将它删除，然后再推胸文件\nrm .gitignore echo \u0026#34;May I come in?\u0026#34; \u0026gt; key.txt git add . git commit -m \u0026#34;task\u0026#34; git push origin master git add . -- 将所有文件添加到暂存区，\u0026#34;.\u0026#34; 代表所有文件 git commit -m \u0026#34;task\u0026#34; -- 将暂存区的文件更新到本地仓库，-m指定提交消息，如果未指定此消息，则将打开默认文本编辑器 git push origin master -- 将本地的 master 分支推送到远程仓库（通常是 origin）的 master分支。 readme: rmCBvG56y58BXzv98yZGdO7ATVL5dW8y level 32 题目描述 经历了所有这些git事情之后，是时候进行另一次逃脱了。祝你好运\n解决方法 登录进去后\n可以发现，在这个shell中输入的命令都会转为大写，这也就导致了命令出错\n所以该shell的内容基本是\nsh -c \u0026#34;\u0026lt;user-input\u0026gt;\u0026#34; 这里要将一个特殊的变量$0，它表示当前脚本的名称或路径\n创建一个script.sh文件\nscript.sh #!/bin/bash echo \u0026#34;$0\u0026#34; 接着我们运行它\n它所储存的就是当前正在执行的文件\n而如果我们直接打印 $0, 则表明当前使用的是zsh shell\n但如果我们只输入一个 $0 就会生成一个新的shell，相当与我们直接运行zsh shell\n所以我们就可以在upper shell中只输入一个 $0 来执行一个新的shell\n$0 cat /etc/bandit_pass/bandit33 readme: odHo63fHiFqcWWJG9rLiLDtPm45KzUKy ","date":"2024-01-18T20:13:41+08:00","image":"https://gcore.jsdelivr.net/gh/wingllllet/pic_bed@img//img/20240118.png","permalink":"https://blog.winglet.com/p/bandit0-33%E5%85%B3/","title":"Bandit0-33关"},{"content":"一、渗透基础知识 渗透测试介绍 渗透测试注意事项（补充） 不能进行恶意攻击 没有获得书面授权时，不能攻击任何目标 遵守国家安全法法规 渗透测试流程 确定目标，信息收集 漏洞探测，漏洞验证 获取所需，信息分析 编写报告，信息整理 安全术语（了解） 脚本 (asp、php、jsp) html (xml、js、css) cms (B/S) 肉鸡、抓鸡、ddos、cc 事件型漏洞、通用型漏洞 web服务器、web容器、中间件 src平台、0day 黑盒白盒测试 嗅探、rookit、社工 poc、expcve 一句话、小马、大马、webshell、提权、后门、跳板、rookit MD5/加盐 (salt) 源码打包、脱库、爆库 HTTP/HTTPS协议 HTTP URL 统一资源定位符(URL时一种特殊类型的URI，包含了用于查找某个资源足够的信息)\n格式： http://host[: port][abs_path]\n例：http://localhost:1313/index.php\nhttp请求头响应头 referer、x-forwarded-for、client-ip 注入漏洞、xss问题、躲避验证\n对ip限制封锁\nhttp: bp\ntcp：modify client-ip\niis put漏洞(严重)\njsp、tomcat 7.0.1-7\nHTTP响应码 200 302 404 400 401 403 500 503 waf拦截菜刀也可能导致50x 安全测试环境配置 配置虚拟机 安装wmware 配置虚拟机网络 nat模式：自动获取ip，以物理机为路由器 桥接模式：自动获取，以物理机的路由器为路由器 虚拟机通信：\n网卡一致 ip网段一致 如果不通可以关闭防火墙 kali: 192.168.114.129 win10: 192.168.114.145 修改虚拟机网段 **ps:**windows系统可以通过win+R并输入uac来修改用户控制系统\n搭建windows server 下载地址： MSDN, 我告诉你 - 做一个安静的工具站 (itellyou.cn)\n操作系统： windows server 2012\n搭建网站(.asp) 当服务器搭建多个站（旁站）\n不同端口，ip域名都相同 相同端口（80）IP不同，也可以 相同端口，相同ip，不同域名 目录建站 创建角色和功能 前面默认选择，在“服务器角色”这里选择如下\n接下来，由于要搭建动态语言脚本，所以在\u0026quot;角色服务\u0026quot;里选择如下（里面的子选项一定也是选中状态）\n接下来就是等待安装\n部署网站 win+R并输入inetmgr打开IIS控制台\n然后我们新建一个网站目录\n**ps：**这里也可以通过自己添加ip来绑定其他更多ip\n接下来我们只需要把一个网站源码放到该目录，然后进行以下修改\n接下来我们就可以直接访问网站，ip:80。如果还是无法访问的话，在默认文档中添加源码的展示文件\n绑定域名 但是如果我们去访问www.baidu.com的话，它会转到百度的页面，这里我们需要修改系统的host解析(优先级高于dns解析)，位置在C:\\Windows\\System32\\Drivers\\etc\\host,并在结尾出添加\n192.168.114.138 www.baidu.com 判断网站是不是基于IIS搭建 用搜索引擎语法inurl=asp?id=\n搭建网站(.php) 下载phpstudy,选择这个版本\n接下来我们在windows 10系统搭建一下。下载后解压并运行程序可得到该界面\n配置系统（处理中） 接下来我们要配置系统，如果你发现windows 10系统没有IIS服务，可以在控制面板-\u0026gt;程序-\u0026gt;启用或关闭windows功能\n接下来我们还要打开FastCgi模块\n课后作业 .asp cms 默认索引文件 后台登陆地址 默认账号/密码 aspcms index.asp http://IP/admin_aspcms/login.asp admin/123456 apcms、南方、xdcms\ndedecms、phpweb、dz、帝国\n","date":"2024-01-18T17:02:45+08:00","image":"https://gcore.jsdelivr.net/gh/wingllllet/pic_bed@img//img/20240121_165102.gif","permalink":"https://blog.winglet.com/p/craser%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0%E6%9B%B4%E6%96%B0%E4%B8%AD/","title":"Craser渗透测试笔记[更新中]"},{"content":"简述 ​\t就以我交实验作业的爬虫代码作为2024年的第一篇博客，也作为我更新博客的开端。其实这个爬虫并不是实验要求的，而是我舍友要我写的，因为我们写的是图书管理系统，所以就把爬数据的任务交给我了。如果想要代码可直接翻到最下面。\n思路 要爬取的页面 要爬取的数据格式 存储数据 代码 import re import time import requests import openpyxl findLink = re.compile(r\u0026#39;\u0026lt;a href=\\\u0026#34;https://book.douban.com/subject/(.*?)\\\u0026#34;\u0026#39;) #获取图书的图书的链接 findTitle = re.compile(r\u0026#39;\u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;(.*?)\u0026#34; /\u0026gt;\u0026#39;) #获取图书的名称 findImgSrc = re.compile(r\u0026#39;\u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;(.*?)\u0026#34; /\u0026gt;\u0026#39;, re.S) #获取图书图片的链接 findDate = re.compile(r\u0026#39;\u0026lt;span class=\u0026#34;pl\u0026#34;\u0026gt;出版年:\u0026lt;/span\u0026gt; (.*?)\u0026lt;br/\u0026gt;\u0026#39;) #图书出版日期 findAuthor = re.compile(r\u0026#39;\u0026lt;meta property=\u0026#34;book:author\u0026#34; content=\u0026#34;(.*?)\u0026#34; /\u0026gt;\u0026#39;) #图书作者名称 findCode = re.compile(r\u0026#39;\u0026lt;meta property=\u0026#34;book:isbn\u0026#34; content=\u0026#34;(.*?)\u0026#34; /\u0026gt;\u0026#39;) #图书编码 findDes = re.compile(r\u0026#39;\u0026lt;meta property=\u0026#34;og:description\u0026#34; content=\u0026#34;(.*?)\u0026#34; /\u0026gt;\u0026#39;, re.S) #图书描述 findPublish = re.compile(r\u0026#39;\u0026lt;span class=\u0026#34;pl\u0026#34;\u0026gt;出版社:\u0026lt;/span\u0026gt;(.*?)\u0026lt;a href=(.*?)\u0026gt;(.*?)\u0026lt;/a\u0026gt;\u0026#39;, re.S) # 图书出版商 #创建一个新的工作簿对象 workbook = openpyxl.Workbook() # 获取默认的工作表 sheet = workbook.active # 写入标题行 sheet.append([\u0026#34;名称\u0026#34;, \u0026#34;描述\u0026#34;, \u0026#34;出版日期\u0026#34;, \u0026#34;作者\u0026#34;, \u0026#34;出版社\u0026#34;, \u0026#34;标准码\u0026#34;, \u0026#34;封面\u0026#34;]) workbook.save(\u0026#34;data.xlsx\u0026#34;) def save(data): sheet.append(data) workbook.save(\u0026#34;data.xlsx\u0026#34;) def askUrl(url): head = { # 模拟浏览器头部信息，向豆瓣服务器发送消息 \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50\u0026#34; } html = \u0026#34;\u0026#34; try: resp = requests.get(url, headers=head) html = resp.text print(resp.status_code) except requests.exceptions.RequestException as e: print(\u0026#34;An error occurred\u0026#34;, str(e)) return html def getData(baseurl): count = 0 for i in range(0, 300): url = baseurl + str(i * 20) html = askUrl(url) links = re.findall(findLink, html) for link in list(filter(lambda link: \u0026#34;buylinks\u0026#34; not in link, links)): newurl = \u0026#34;https://book.douban.com/subject/\u0026#34; + link time.sleep(5) html = askUrl(newurl) data = [] try: count += 1 # 书名 title = re.findall(findTitle, html)[0] #图片链接 imgsrc = re.findall(findImgSrc, html)[0] #出版日期 date = re.findall(findDate, html)[0] #图书作者 author = re.findall(findAuthor, html)[0] #出版商 publish = re.findall(findPublish, html)[0][2] #编号 code = re.findall(findCode, html)[0] #描述 decr = re.findall(findDes, html)[0] data.append(title) data.append(decr) data.append(date) data.append(author) data.append(publish) data.append(f\u0026#34;ISBN: {code}\u0026#34;) data.append(imgsrc) save(data) if count == 1000: exit(\u0026#34;爬取完成\u0026#34;) except: continue def main(): baseurl = \u0026#34;https://book.douban.com/tag/经典?type=T\u0026amp;start=\u0026#34; getData(baseurl) if __name__ == \u0026#39;__main__\u0026#39;: main() ​\t运行之后，常常会出现403码，估计还是访问太快导致的，不过当时要求只是一定量的数据即可，所以有些数据没爬到就算了。\n​\t本来想长篇大论的详细说说代码是怎么写的，但里面知识点挺多的，全说的话不知道该怎么讲。还是后面有时间写个基础爬虫的文章算了。\n","date":"2024-01-16T17:48:22+08:00","image":"https://gcore.jsdelivr.net/gh/wingllllet/pic_bed@img//img/640.jpg","permalink":"https://blog.winglet.com/p/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E5%9B%BE%E4%B9%A6%E4%BF%A1%E6%81%AF/","title":"爬取豆瓣图书信息"},{"content":"ok，我的2024年第一篇博客就此展开，回顾一下我的2023年，这一年里我领到了校赛证书，互联网+证书，认识了一群大佬，并且通过我舍友介绍去挣了大学第一桶金。不过总的来看，这一年还是一个摆烂的一年。不过这两年走过来，我也有了一定的方向，希望2024年我能坚持学习下去。完成2024年的目标。 ","date":"2024-01-15T11:46:02+08:00","image":"https://gcore.jsdelivr.net/gh/wingllllet/pic_bed@img/img/2.jpg","permalink":"https://blog.winglet.com/p/hello-world/","title":"Hello World"}]